{"version":3,"sources":["Context/SectionContext/SectionContext.jsx","components/Header/Header.jsx","data/SVG.js","data/Section.js","App.jsx","serviceWorker.js","index.js"],"names":["React","createContext","SectionProvider","Provider","SectionConsumer","Consumer","Header","react_default","a","createElement","_ref","sections","currentSection","setCurrentSection","resetCurrentSection","className","concat","Object","values","map","_ref2","name","markup","svg","key","data-section","onClick","dangerouslySetInnerHTML","__html","SVG","config","classCallCheck","this","raw","fields","description","Section","nameFormatted","App","_this","possibleConstructorReturn","getPrototypeOf","call","state","client","contentful","space","process","accessToken","getSections","getEntries","content_type","order","then","entries","items","entry","setState","value","objectSpread","Header_Header_Header","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"mPAKIA,IAAMC,gBAFEC,IAAVC,SACUC,IAAVC,SCAWC,UAAS,kBACpBC,EAAAC,EAAAC,cAACL,EAAD,KACG,SAAAM,GAAA,IAAGC,EAAHD,EAAGC,SAAUC,EAAbF,EAAaE,eAAgBC,EAA7BH,EAA6BG,kBAAmBC,EAAhDJ,EAAgDI,oBAAhD,OACCP,EAAAC,EAAAC,cAAA,UAAQM,UAAS,UAAAC,OAAYJ,EAAiB,WAAa,KACzDL,EAAAC,EAAAC,cAAA,MAAIM,UAAU,eACXE,OAAOC,OAAOP,GAAUQ,IAAI,SAAAC,GAAA,IAAGC,EAAHD,EAAGC,KAAaC,EAAhBF,EAASG,IAAOD,OAAhB,OAC3Bf,EAAAC,EAAAC,cAAA,MACEe,IAAKH,EACLI,eAAcJ,EACdK,QAAS,kBAAMb,EAAkBQ,IACjCN,UAAS,oBAAAC,OAAsBK,EAAtB,KAAAL,OACPK,IAAST,EAAiB,WAAa,IAEzCe,wBAAyB,CAAEC,OAAQN,QAIzCf,EAAAC,EAAAC,cAAA,UAAQiB,QAASZ,EAAqBC,UAAU,uBAAhD,cCrBKc,EACX,SAAAA,EAAYC,GAASb,OAAAc,EAAA,EAAAd,CAAAe,KAAAH,GACnBG,KAAKC,IAAMH,EACXE,KAAKV,OAASU,KAAKC,IAAIC,OAAOZ,OAC9BU,KAAKX,KAAOW,KAAKC,IAAIC,OAAOb,KAC5BW,KAAKG,YAAcH,KAAKC,IAAIC,OAAOC,aCH1BC,EACX,SAAAA,EAAYN,GAASb,OAAAc,EAAA,EAAAd,CAAAe,KAAAI,GACnBJ,KAAKC,IAAMH,EACXE,KAAKX,KAAOW,KAAKC,IAAIC,OAAOb,KAC5BW,KAAKK,cAAgBL,KAAKC,IAAIC,OAAOG,cACrCL,KAAKT,IAAM,IAAIM,EAAIG,KAAKC,IAAIC,OAAOX,MCoDxBe,sBAnDb,SAAAA,IAAc,IAAAC,EAAA,OAAAtB,OAAAc,EAAA,EAAAd,CAAAe,KAAAM,IACZC,EAAAtB,OAAAuB,EAAA,EAAAvB,CAAAe,KAAAf,OAAAwB,EAAA,EAAAxB,CAAAqB,GAAAI,KAAAV,QAGFW,MAAQ,CACNhC,SAAU,GACVC,eAAgB,MANJ2B,EAQdK,OAASC,IAAwB,CAC/BC,MAAOC,eACPC,YAAaD,qEAVDR,EAadU,YAAc,kBACZV,EAAKK,OACFM,WAAW,CACVC,aAAc,UACdC,MAAO,iBAERC,KAAK,SAAAC,GACJ,IAAM3C,EAAW2C,EAAQC,MAAMpC,IAAI,SAAAqC,GAAK,OAAI,IAAIpB,EAAQoB,KACxDjB,EAAKkB,SAAS,CAAE9C,gBArBR4B,EAwBd1B,kBAAoB,SAAAD,GAClB2B,EAAKkB,SAAS,CAAE7C,oBAzBJ2B,EA4BdzB,oBAAsB,WACpByB,EAAKkB,SAAS,CAAE7C,eAAgB,QA3BhC2B,EAAKU,cAFOV,wEAiCZ,OACEhC,EAAAC,EAAAC,cAAA,OAAKM,UAAU,OACbR,EAAAC,EAAAC,cAACP,EAAD,CACEwD,MAAKzC,OAAA0C,EAAA,EAAA1C,CAAA,GACAe,KAAKW,MADL,CAEHC,OAAQZ,KAAKY,OACbK,YAAajB,KAAKiB,YAClBpC,kBAAmBmB,KAAKnB,kBACxBC,oBAAqBkB,KAAKlB,uBAG5BP,EAAAC,EAAAC,cAACmD,EAAD,eA7CQC,cCKEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO7D,EAAAC,EAAAC,cAAC4D,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMrB,KAAK,SAAAsB,GACjCA,EAAaC","file":"static/js/main.759d664e.chunk.js","sourcesContent":["import React from \"react\";\n\nexport const {\n  Provider: SectionProvider,\n  Consumer: SectionConsumer\n} = React.createContext();\n","import React from \"react\";\nimport { SectionConsumer } from \"../../Context/SectionContext/SectionContext\";\nimport \"./Header.css\";\n\nexport const Header = () => (\n  <SectionConsumer>\n    {({ sections, currentSection, setCurrentSection, resetCurrentSection }) => (\n      <header className={`Header ${currentSection ? \"selected\" : \"\"}`}>\n        <ul className=\"Header-list\">\n          {Object.values(sections).map(({ name, svg: { markup } }) => (\n            <li\n              key={name}\n              data-section={name}\n              onClick={() => setCurrentSection(name)}\n              className={`Header-list-item ${name} ${\n                name === currentSection ? \"selected\" : \"\"\n              }`}\n              dangerouslySetInnerHTML={{ __html: markup }}\n            />\n          ))}\n        </ul>\n        <button onClick={resetCurrentSection} className=\"Header-close-button\">\n          Close\n        </button>\n      </header>\n    )}\n  </SectionConsumer>\n);\n","export class SVG {\n  constructor(config) {\n    this.raw = config;\n    this.markup = this.raw.fields.markup;\n    this.name = this.raw.fields.name;\n    this.description = this.raw.fields.description;\n  }\n}\n","import { SVG } from \"./SVG\";\n\nexport class Section {\n  constructor(config) {\n    this.raw = config;\n    this.name = this.raw.fields.name;\n    this.nameFormatted = this.raw.fields.nameFormatted;\n    this.svg = new SVG(this.raw.fields.svg);\n  }\n}\n","import React, { Component } from \"react\";\nimport * as contentful from \"contentful\";\nimport { Header } from \"./components/Header/Header\";\nimport { SectionProvider } from \"./Context/SectionContext/SectionContext\";\nimport { Section } from \"./data/Section\";\nimport \"./App.css\";\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.getSections();\n  }\n  state = {\n    sections: {},\n    currentSection: null\n  };\n  client = contentful.createClient({\n    space: process.env.ROBDONN_CONTENTFUL_SPACE,\n    accessToken: process.env.ROBDONN_CONTENTFUL_ACCESS_KEY\n  });\n\n  getSections = () =>\n    this.client\n      .getEntries({\n        content_type: \"section\",\n        order: \"fields.order\"\n      })\n      .then(entries => {\n        const sections = entries.items.map(entry => new Section(entry));\n        this.setState({ sections });\n      });\n\n  setCurrentSection = currentSection => {\n    this.setState({ currentSection });\n  };\n\n  resetCurrentSection = () => {\n    this.setState({ currentSection: null });\n  };\n\n  render() {\n    return (\n      <div className=\"App\">\n        <SectionProvider\n          value={{\n            ...this.state,\n            client: this.client,\n            getSections: this.getSections,\n            setCurrentSection: this.setCurrentSection,\n            resetCurrentSection: this.resetCurrentSection\n          }}\n        >\n          <Header />\n        </SectionProvider>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}