{"version":3,"sources":["components/Header/Header.jsx","data/SVG.js","data/Section.js","App.jsx","serviceWorker.js","index.js"],"names":["Header","_Component","_getPrototypeOf2","_this","Object","classCallCheck","this","_len","arguments","length","args","Array","_key","possibleConstructorReturn","getPrototypeOf","call","apply","concat","state","selected","handleClick","e","setState","target","dataset","section","handleClose","preventDefault","inherits","createClass","key","value","_this2","sections","props","react_default","a","createElement","className","values","map","_ref","name","markup","svg","data-section","onClick","dangerouslySetInnerHTML","__html","Component","SVG","config","raw","fields","description","Section","nameFormatted","App","contentful","space","process","accessToken","getEntries","content_type","order","then","entries","items","entry","Header_Header_Header","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"yOAGaA,UAAb,SAAAC,GAAA,SAAAD,IAAA,IAAAE,EAAAC,EAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAN,GAAA,QAAAO,EAAAC,UAAAC,OAAAC,EAAA,IAAAC,MAAAJ,GAAAK,EAAA,EAAAA,EAAAL,EAAAK,IAAAF,EAAAE,GAAAJ,UAAAI,GAAA,OAAAT,EAAAC,OAAAS,EAAA,EAAAT,CAAAE,MAAAJ,EAAAE,OAAAU,EAAA,EAAAV,CAAAJ,IAAAe,KAAAC,MAAAd,EAAA,CAAAI,MAAAW,OAAAP,MACEQ,MAAQ,CACNC,SAAU,MAFdhB,EAKEiB,YAAc,SAAAC,GACZlB,EAAKmB,SAAS,CAAEH,SAAUE,EAAEE,OAAOC,QAAQC,WAN/CtB,EASEuB,YAAc,SAAAL,GACZA,EAAEM,iBACFxB,EAAKmB,SAAS,CAAEH,SAAU,QAX9BhB,EAAA,OAAAC,OAAAwB,EAAA,EAAAxB,CAAAJ,EAAAC,GAAAG,OAAAyB,EAAA,EAAAzB,CAAAJ,EAAA,EAAA8B,IAAA,SAAAC,MAAA,WAcW,IAAAC,EAAA1B,KACC2B,EAAa3B,KAAK4B,MAAlBD,SACAd,EAAab,KAAKY,MAAlBC,SACR,OACEgB,EAAAC,EAAAC,cAAA,UAAQC,UAAS,UAAArB,OAAYE,EAAW,WAAa,KACnDgB,EAAAC,EAAAC,cAAA,MAAIC,UAAU,eACXlC,OAAOmC,OAAON,GAAUO,IAAI,SAAAC,GAAA,IAAGC,EAAHD,EAAGC,KAAaC,EAAhBF,EAASG,IAAOD,OAAhB,OAC3BR,EAAAC,EAAAC,cAAA,MACEP,IAAKY,EACLG,eAAcH,EACdI,QAASd,EAAKZ,YACdkB,UAAS,oBAAArB,OAAsByB,EAAtB,KAAAzB,OACPyB,IAASvB,EAAW,WAAa,IAEnC4B,wBAAyB,CAAEC,OAAQL,QAIzCR,EAAAC,EAAAC,cAAA,UAAQS,QAASxC,KAAKoB,YAAaY,UAAU,uBAA7C,cAhCRtC,EAAA,CAA4BiD,cCHfC,EACX,SAAAA,EAAYC,GAAS/C,OAAAC,EAAA,EAAAD,CAAAE,KAAA4C,GACnB5C,KAAK8C,IAAMD,EACX7C,KAAKqC,OAASrC,KAAK8C,IAAIC,OAAOV,OAC9BrC,KAAKoC,KAAOpC,KAAK8C,IAAIC,OAAOX,KAC5BpC,KAAKgD,YAAchD,KAAK8C,IAAIC,OAAOC,aCH1BC,EACX,SAAAA,EAAYJ,GAAS/C,OAAAC,EAAA,EAAAD,CAAAE,KAAAiD,GACnBjD,KAAK8C,IAAMD,EACX7C,KAAKoC,KAAOpC,KAAK8C,IAAIC,OAAOX,KAC5BpC,KAAKkD,cAAgBlD,KAAK8C,IAAIC,OAAOG,cACrClD,KAAKsC,IAAM,IAAIM,EAAI5C,KAAK8C,IAAIC,OAAOT,MC8BxBa,qNA9BbvC,MAAQ,CACNe,SAAU,uFAGQ,IAAAD,EAAA1B,KACHoD,IAAwB,CACrCC,MAAOC,eACPC,YAAaD,qEAIZE,WAAW,CACVC,aAAc,UACdC,MAAO,iBAERC,KAAK,SAAAC,GACJ,IAAMjC,EAAWiC,EAAQC,MAAM3B,IAAI,SAAA4B,GAAK,OAAI,IAAIb,EAAQa,KACxDpC,EAAKV,SAAS,CAAEW,gDAGb,IACCA,EAAa3B,KAAKY,MAAlBe,SACR,OACEE,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAACgC,EAAD,CAAQpC,SAAUA,YAzBRgB,cCMEqB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOzC,EAAAC,EAAAC,cAACwC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMjB,KAAK,SAAAkB,GACjCA,EAAaC","file":"static/js/main.970f14a5.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport \"./Header.css\";\n\nexport class Header extends Component {\n  state = {\n    selected: null\n  };\n\n  handleClick = e => {\n    this.setState({ selected: e.target.dataset.section });\n  };\n\n  handleClose = e => {\n    e.preventDefault();\n    this.setState({ selected: null });\n  };\n\n  render() {\n    const { sections } = this.props;\n    const { selected } = this.state;\n    return (\n      <header className={`Header ${selected ? \"selected\" : \"\"}`}>\n        <ul className=\"Header-list\">\n          {Object.values(sections).map(({ name, svg: { markup } }) => (\n            <li\n              key={name}\n              data-section={name}\n              onClick={this.handleClick}\n              className={`Header-list-item ${name} ${\n                name === selected ? \"selected\" : \"\"\n              }`}\n              dangerouslySetInnerHTML={{ __html: markup }}\n            />\n          ))}\n        </ul>\n        <button onClick={this.handleClose} className=\"Header-close-button\">\n          Close\n        </button>\n      </header>\n    );\n  }\n}\n","export class SVG {\n  constructor(config) {\n    this.raw = config;\n    this.markup = this.raw.fields.markup;\n    this.name = this.raw.fields.name;\n    this.description = this.raw.fields.description;\n  }\n}\n","import { SVG } from \"./SVG\";\n\nexport class Section {\n  constructor(config) {\n    this.raw = config;\n    this.name = this.raw.fields.name;\n    this.nameFormatted = this.raw.fields.nameFormatted;\n    this.svg = new SVG(this.raw.fields.svg);\n  }\n}\n","import React, { Component } from \"react\";\nimport * as contentful from \"contentful\";\nimport { Header } from \"./components/Header/Header\";\nimport { Section } from \"./data/Section\";\nimport \"./App.css\";\n\nclass App extends Component {\n  state = {\n    sections: {}\n  };\n\n  componentDidMount() {\n    const client = contentful.createClient({\n      space: process.env.ROBDONN_CONTENTFUL_SPACE,\n      accessToken: process.env.ROBDONN_CONTENTFUL_ACCESS_KEY\n    });\n\n    client\n      .getEntries({\n        content_type: \"section\",\n        order: \"fields.order\"\n      })\n      .then(entries => {\n        const sections = entries.items.map(entry => new Section(entry));\n        this.setState({ sections });\n      });\n  }\n  render() {\n    const { sections } = this.state;\n    return (\n      <div className=\"App\">\n        <Header sections={sections} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}